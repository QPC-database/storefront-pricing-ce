<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\PricingStorefrontApi\Api;

use \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookCreateRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\AssignPricesRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\UnassignPricesRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\GetPricesRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\GetPricesOutputInterface;
use \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookResponse;
use \Magento\PricingStorefrontApi\Proto\PriceBookCreateRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookDeleteRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse;
use \Magento\PricingStorefrontApi\Proto\AssignPricesRequest;
use \Magento\PricingStorefrontApi\Proto\UnassignPricesRequest;
use \Magento\PricingStorefrontApi\Proto\GetPricesRequest;
use \Magento\PricingStorefrontApi\Proto\GetPricesOutput;
use \Magento\PricingStorefrontApi\Proto\PriceBookServiceClient;

/**
 * Autogenerated description for PriceBookServiceProxyServer class
 *
 * @SuppressWarnings(PHPMD)
 */
class PriceBookServiceProxyServer implements \Magento\PricingStorefrontApi\Proto\PriceBookServiceInterface
{
    /**
     * @var PriceBookServiceServerInterface
     */
    private $service;

    /**
     * @param PriceBookServiceServerInterface $service
     */
    public function __construct(
        PriceBookServiceServerInterface $service
    ) {
        $this->service = $service;
    }

    /**
     * Autogenerated description for findPriceBook method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param PriceBookScopeRequest $in
     * @return PriceBookResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function findPriceBook(\Spiral\GRPC\ContextInterface $ctx, PriceBookScopeRequest $in): PriceBookResponse
    {
        try {
            $magentoDtoRequest = $this->findPriceBookFromProto($in);
            $magentoDtoResponse = $this->service->findPriceBook($magentoDtoRequest);
            return $this->findPriceBookToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for findPriceBook method
     *
     * @param PriceBookScopeRequest $value
     * @return PriceBookScopeRequestInterface
     */
    private function findPriceBookFromProto(PriceBookScopeRequest $value): PriceBookScopeRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequest
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequest();
            $prop1 = $value->getScope();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Scope
                // to \Magento\PricingStorefrontApi\Api\Data\Scope
                /** @var \Magento\PricingStorefrontApi\Proto\Scope $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Scope();
                    $values = [];
                    foreach ($prop1->getWebsite() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setWebsite($values);
                    $values = [];
                    foreach ($prop1->getCustomerGroup() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCustomerGroup($values);
                    return $r;
                };
                $out = $p();
                $r->setScope($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for findPriceBook method
     *
     * @param PriceBookResponseInterface $value
     * @return PriceBookResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function findPriceBookToProto(PriceBookResponseInterface $value): PriceBookResponse
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse
        // to \Magento\PricingStorefrontApi\Proto\PriceBookResponse
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookResponse();
            $prop1 = $value->getPriceBook();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBook
                // to \Magento\PricingStorefrontApi\Proto\PriceBook
                /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBook $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\PriceBook();
                    $r->setId($prop1->getId());
                    $r->setName($prop1->getName());
                    $r->setParentId($prop1->getParentId());
                    return $r;
                };
                $proto = $p();
                $r->setPriceBook($proto);
            }
            $prop2 = $value->getStatus();
            if ($prop2 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Status
                // to \Magento\PricingStorefrontApi\Proto\Status
                /** @var \Magento\PricingStorefrontApi\Api\Data\Status $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Status();
                    $r->setCode($prop2->getCode());
                    $r->setMessage($prop2->getMessage());
                    return $r;
                };
                $proto = $p();
                $r->setStatus($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for createPriceBook method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param PriceBookCreateRequest $in
     * @return PriceBookResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function createPriceBook(\Spiral\GRPC\ContextInterface $ctx, PriceBookCreateRequest $in): PriceBookResponse
    {
        try {
            $magentoDtoRequest = $this->createPriceBookFromProto($in);
            $magentoDtoResponse = $this->service->createPriceBook($magentoDtoRequest);
            return $this->createPriceBookToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for createPriceBook method
     *
     * @param PriceBookCreateRequest $value
     * @return PriceBookCreateRequestInterface
     */
    private function createPriceBookFromProto(PriceBookCreateRequest $value): PriceBookCreateRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookCreateRequest
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookCreateRequest
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookCreateRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookCreateRequest();
            $r->setName($value->getName());
            $r->setParentId($value->getParentId());
            $prop3 = $value->getScope();
            if ($prop3 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Scope
                // to \Magento\PricingStorefrontApi\Api\Data\Scope
                /** @var \Magento\PricingStorefrontApi\Proto\Scope $prop3 **/
                $p = function () use ($prop3) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Scope();
                    $values = [];
                    foreach ($prop3->getWebsite() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setWebsite($values);
                    $values = [];
                    foreach ($prop3->getCustomerGroup() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCustomerGroup($values);
                    return $r;
                };
                $out = $p();
                $r->setScope($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for createPriceBook method
     *
     * @param PriceBookResponseInterface $value
     * @return PriceBookResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function createPriceBookToProto(PriceBookResponseInterface $value): PriceBookResponse
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse
        // to \Magento\PricingStorefrontApi\Proto\PriceBookResponse
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookResponse();
            $prop1 = $value->getPriceBook();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBook
                // to \Magento\PricingStorefrontApi\Proto\PriceBook
                /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBook $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\PriceBook();
                    $r->setId($prop1->getId());
                    $r->setName($prop1->getName());
                    $r->setParentId($prop1->getParentId());
                    return $r;
                };
                $proto = $p();
                $r->setPriceBook($proto);
            }
            $prop2 = $value->getStatus();
            if ($prop2 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Status
                // to \Magento\PricingStorefrontApi\Proto\Status
                /** @var \Magento\PricingStorefrontApi\Api\Data\Status $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Status();
                    $r->setCode($prop2->getCode());
                    $r->setMessage($prop2->getMessage());
                    return $r;
                };
                $proto = $p();
                $r->setStatus($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deletePriceBook method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param PriceBookDeleteRequest $in
     * @return PriceBookStatusResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function deletePriceBook(\Spiral\GRPC\ContextInterface $ctx, PriceBookDeleteRequest $in): PriceBookStatusResponse
    {
        try {
            $magentoDtoRequest = $this->deletePriceBookFromProto($in);
            $magentoDtoResponse = $this->service->deletePriceBook($magentoDtoRequest);
            return $this->deletePriceBookToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for deletePriceBook method
     *
     * @param PriceBookDeleteRequest $value
     * @return PriceBookDeleteRequestInterface
     */
    private function deletePriceBookFromProto(PriceBookDeleteRequest $value): PriceBookDeleteRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookDeleteRequest
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteRequest
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookDeleteRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteRequest();
            $r->setId($value->getId());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for deletePriceBook method
     *
     * @param PriceBookStatusResponseInterface $value
     * @return PriceBookStatusResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deletePriceBookToProto(PriceBookStatusResponseInterface $value): PriceBookStatusResponse
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponse
        // to \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse();
            $prop1 = $value->getStatus();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Status
                // to \Magento\PricingStorefrontApi\Proto\Status
                /** @var \Magento\PricingStorefrontApi\Api\Data\Status $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Status();
                    $r->setCode($prop1->getCode());
                    $r->setMessage($prop1->getMessage());
                    return $r;
                };
                $proto = $p();
                $r->setStatus($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for assignPrices method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param AssignPricesRequest $in
     * @return PriceBookStatusResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function assignPrices(\Spiral\GRPC\ContextInterface $ctx, AssignPricesRequest $in): PriceBookStatusResponse
    {
        try {
            $magentoDtoRequest = $this->assignPricesFromProto($in);
            $magentoDtoResponse = $this->service->assignPrices($magentoDtoRequest);
            return $this->assignPricesToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for assignPrices method
     *
     * @param AssignPricesRequest $value
     * @return AssignPricesRequestInterface
     */
    private function assignPricesFromProto(AssignPricesRequest $value): AssignPricesRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\AssignPricesRequest
        // to \Magento\PricingStorefrontApi\Api\Data\AssignPricesRequest
        /** @var \Magento\PricingStorefrontApi\Proto\AssignPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\AssignPricesRequest();
            $res = [];
            foreach ($value->getPrices() as $item1) {
                // convert data from \Magento\PricingStorefrontApi\Proto\ProductPrice
                // to \Magento\PricingStorefrontApi\Api\Data\ProductPrice
                /** @var \Magento\PricingStorefrontApi\Proto\ProductPrice $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\ProductPrice();
                    $r->setEntityId($item1->getEntityId());
                    $prop3 = $item1->getMinimumPrice();
                    if ($prop3 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Price
                        // to \Magento\PricingStorefrontApi\Api\Data\Price
                        /** @var \Magento\PricingStorefrontApi\Proto\Price $prop3 **/
                        $p = function () use ($prop3) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Price();
                            $r->setRegular($prop3->getRegular());
                            $r->setFinal($prop3->getFinal());
                            return $r;
                        };
                        $out = $p();
                        $r->setMinimumPrice($out);
                    }
                    $prop4 = $item1->getMaximumPrice();
                    if ($prop4 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Price
                        // to \Magento\PricingStorefrontApi\Api\Data\Price
                        /** @var \Magento\PricingStorefrontApi\Proto\Price $prop4 **/
                        $p = function () use ($prop4) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Price();
                            $r->setRegular($prop4->getRegular());
                            $r->setFinal($prop4->getFinal());
                            return $r;
                        };
                        $out = $p();
                        $r->setMaximumPrice($out);
                    }
                    $r->setQty($item1->getQty());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPrices($res);
            $r->setPriceBookId($value->getPriceBookId());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for assignPrices method
     *
     * @param PriceBookStatusResponseInterface $value
     * @return PriceBookStatusResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function assignPricesToProto(PriceBookStatusResponseInterface $value): PriceBookStatusResponse
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponse
        // to \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse();
            $prop1 = $value->getStatus();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Status
                // to \Magento\PricingStorefrontApi\Proto\Status
                /** @var \Magento\PricingStorefrontApi\Api\Data\Status $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Status();
                    $r->setCode($prop1->getCode());
                    $r->setMessage($prop1->getMessage());
                    return $r;
                };
                $proto = $p();
                $r->setStatus($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for unassignPrices method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param UnassignPricesRequest $in
     * @return PriceBookStatusResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function unassignPrices(\Spiral\GRPC\ContextInterface $ctx, UnassignPricesRequest $in): PriceBookStatusResponse
    {
        try {
            $magentoDtoRequest = $this->unassignPricesFromProto($in);
            $magentoDtoResponse = $this->service->unassignPrices($magentoDtoRequest);
            return $this->unassignPricesToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for unassignPrices method
     *
     * @param UnassignPricesRequest $value
     * @return UnassignPricesRequestInterface
     */
    private function unassignPricesFromProto(UnassignPricesRequest $value): UnassignPricesRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\UnassignPricesRequest
        // to \Magento\PricingStorefrontApi\Api\Data\UnassignPricesRequest
        /** @var \Magento\PricingStorefrontApi\Proto\UnassignPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\UnassignPricesRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setPriceBookId($value->getPriceBookId());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for unassignPrices method
     *
     * @param PriceBookStatusResponseInterface $value
     * @return PriceBookStatusResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function unassignPricesToProto(PriceBookStatusResponseInterface $value): PriceBookStatusResponse
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponse
        // to \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookStatusResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookStatusResponse();
            $prop1 = $value->getStatus();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Status
                // to \Magento\PricingStorefrontApi\Proto\Status
                /** @var \Magento\PricingStorefrontApi\Api\Data\Status $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Status();
                    $r->setCode($prop1->getCode());
                    $r->setMessage($prop1->getMessage());
                    return $r;
                };
                $proto = $p();
                $r->setStatus($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getPrices method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param GetPricesRequest $in
     * @return GetPricesOutput
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function getPrices(\Spiral\GRPC\ContextInterface $ctx, GetPricesRequest $in): GetPricesOutput
    {
        try {
            $magentoDtoRequest = $this->getPricesFromProto($in);
            $magentoDtoResponse = $this->service->getPrices($magentoDtoRequest);
            return $this->getPricesToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for getPrices method
     *
     * @param GetPricesRequest $value
     * @return GetPricesRequestInterface
     */
    private function getPricesFromProto(GetPricesRequest $value): GetPricesRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\GetPricesRequest
        // to \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest
        /** @var \Magento\PricingStorefrontApi\Proto\GetPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest();
            $r->setPriceBookId($value->getPriceBookId());
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for getPrices method
     *
     * @param GetPricesOutputInterface $value
     * @return GetPricesOutput
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getPricesToProto(GetPricesOutputInterface $value): GetPricesOutput
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput
        // to \Magento\PricingStorefrontApi\Proto\GetPricesOutput
        /** @var \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\GetPricesOutput();
            $res = [];
            foreach ($value->getPrices() as $item1) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\ProductPrice
                // to \Magento\PricingStorefrontApi\Proto\ProductPrice
                /** @var \Magento\PricingStorefrontApi\Api\Data\ProductPrice $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\ProductPrice();
                    $r->setEntityId($item1->getEntityId());
                    $prop3 = $item1->getMinimumPrice();
                    if ($prop3 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Price
                        // to \Magento\PricingStorefrontApi\Proto\Price
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Price $prop3 **/
                        $p = function () use ($prop3) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Price();
                            $r->setRegular($prop3->getRegular());
                            $r->setFinal($prop3->getFinal());
                            return $r;
                        };
                        $proto = $p();
                        $r->setMinimumPrice($proto);
                    }
                    $prop4 = $item1->getMaximumPrice();
                    if ($prop4 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Price
                        // to \Magento\PricingStorefrontApi\Proto\Price
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Price $prop4 **/
                        $p = function () use ($prop4) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Price();
                            $r->setRegular($prop4->getRegular());
                            $r->setFinal($prop4->getFinal());
                            return $r;
                        };
                        $proto = $p();
                        $r->setMaximumPrice($proto);
                    }
                    $r->setQty($item1->getQty());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setPrices($res);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getTierPrices method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param GetPricesRequest $in
     * @return GetPricesOutput
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function getTierPrices(\Spiral\GRPC\ContextInterface $ctx, GetPricesRequest $in): GetPricesOutput
    {
        try {
            $magentoDtoRequest = $this->getTierPricesFromProto($in);
            $magentoDtoResponse = $this->service->getTierPrices($magentoDtoRequest);
            return $this->getTierPricesToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for getTierPrices method
     *
     * @param GetPricesRequest $value
     * @return GetPricesRequestInterface
     */
    private function getTierPricesFromProto(GetPricesRequest $value): GetPricesRequestInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\GetPricesRequest
        // to \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest
        /** @var \Magento\PricingStorefrontApi\Proto\GetPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest();
            $r->setPriceBookId($value->getPriceBookId());
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for getTierPrices method
     *
     * @param GetPricesOutputInterface $value
     * @return GetPricesOutput
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getTierPricesToProto(GetPricesOutputInterface $value): GetPricesOutput
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput
        // to \Magento\PricingStorefrontApi\Proto\GetPricesOutput
        /** @var \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\GetPricesOutput();
            $res = [];
            foreach ($value->getPrices() as $item1) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\ProductPrice
                // to \Magento\PricingStorefrontApi\Proto\ProductPrice
                /** @var \Magento\PricingStorefrontApi\Api\Data\ProductPrice $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\ProductPrice();
                    $r->setEntityId($item1->getEntityId());
                    $prop3 = $item1->getMinimumPrice();
                    if ($prop3 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Price
                        // to \Magento\PricingStorefrontApi\Proto\Price
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Price $prop3 **/
                        $p = function () use ($prop3) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Price();
                            $r->setRegular($prop3->getRegular());
                            $r->setFinal($prop3->getFinal());
                            return $r;
                        };
                        $proto = $p();
                        $r->setMinimumPrice($proto);
                    }
                    $prop4 = $item1->getMaximumPrice();
                    if ($prop4 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Price
                        // to \Magento\PricingStorefrontApi\Proto\Price
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Price $prop4 **/
                        $p = function () use ($prop4) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Price();
                            $r->setRegular($prop4->getRegular());
                            $r->setFinal($prop4->getFinal());
                            return $r;
                        };
                        $proto = $p();
                        $r->setMaximumPrice($proto);
                    }
                    $r->setQty($item1->getQty());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setPrices($res);
            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
