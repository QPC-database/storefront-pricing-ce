<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\PricingStorefrontApi\Api;

use \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookCreateResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\AssignPricesRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookAssignPricesResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\UnassignPricesRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\PriceBookUnassignPricesResponseInterface;
use \Magento\PricingStorefrontApi\Api\Data\GetPricesRequestInterface;
use \Magento\PricingStorefrontApi\Api\Data\GetPricesOutputInterface;
use \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookResponse;
use \Magento\PricingStorefrontApi\Proto\PriceBookRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookCreateResponse;
use \Magento\PricingStorefrontApi\Proto\PriceBookDeleteRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookDeleteResponse;
use \Magento\PricingStorefrontApi\Proto\AssignPricesRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookAssignPricesResponse;
use \Magento\PricingStorefrontApi\Proto\UnassignPricesRequest;
use \Magento\PricingStorefrontApi\Proto\PriceBookUnassignPricesResponse;
use \Magento\PricingStorefrontApi\Proto\GetPricesRequest;
use \Magento\PricingStorefrontApi\Proto\GetPricesOutput;
use \Magento\PricingStorefrontApi\Proto\PriceBookServiceClient;

/**
 * Autogenerated description for PriceBookService class
 *
 * @SuppressWarnings(PHPMD)
 */
class PriceBookService implements PriceBookServiceInterface
{
    /**
     * @var PriceBookServiceClient
     */
    private $protoClient;

    /**
     * @param string $hostname
     * @param array $options
     * @param string|null $channel
     */
    public function __construct(
        string $hostname,
        array $options,
        ?string $channel = null
    ) {
        $this->protoClient = new PriceBookServiceClient($hostname, $options, $channel);
    }

    /**
     * @inheritdoc
     *
     * @param PriceBookScopeRequestInterface $request
     * @return PriceBookResponseInterface
     * @throws \Throwable
     */
    public function buildPriceBookId(PriceBookScopeRequestInterface $request): PriceBookResponseInterface
    {
        $protoRequest = $this->buildPriceBookIdToProto($request);
        [$protoResult, $status] = $this->protoClient->buildPriceBookId($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->buildPriceBookIdFromProto($protoResult);
    }

    /**
     * Autogenerated description for buildPriceBookId method
     *
     * @param PriceBookScopeRequestInterface $value
     * @return PriceBookScopeRequest
     */
    private function buildPriceBookIdToProto(PriceBookScopeRequestInterface $value): PriceBookScopeRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequest
        // to \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest();
            $prop1 = $value->getScopes();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Scope
                // to \Magento\PricingStorefrontApi\Proto\Scope
                /** @var \Magento\PricingStorefrontApi\Api\Data\Scope $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Scope();
                    $values = [];
                    foreach ($prop1->getWebsite() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setWebsite($values);
                    $values = [];
                    foreach ($prop1->getCustomerGroup() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCustomerGroup($values);
                    return $r;
                };
                $proto = $p();
                $r->setScopes($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for buildPriceBookId method
     *
     * @param PriceBookResponse $value
     * @return PriceBookResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function buildPriceBookIdFromProto(PriceBookResponse $value): PriceBookResponseInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookResponse
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse();
            $prop1 = $value->getPriceBook();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\PriceBook
                // to \Magento\PricingStorefrontApi\Api\Data\PriceBook
                /** @var \Magento\PricingStorefrontApi\Proto\PriceBook $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBook();
                    $r->setId($prop1->getId());
                    $r->setName($prop1->getName());
                    $r->setParentId($prop1->getParentId());
                    $prop5 = $prop1->getScope();
                    if ($prop5 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Scope
                        // to \Magento\PricingStorefrontApi\Api\Data\Scope
                        /** @var \Magento\PricingStorefrontApi\Proto\Scope $prop5 **/
                        $p = function () use ($prop5) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Scope();
                            $values = [];
                            foreach ($prop5->getWebsite() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setWebsite($values);
                            $values = [];
                            foreach ($prop5->getCustomerGroup() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setCustomerGroup($values);
                            return $r;
                        };
                        $out = $p();
                        $r->setScope($out);
                    }
                    return $r;
                };
                $out = $p();
                $r->setPriceBook($out);
            }
            $prop2 = $value->getStatus();
            if ($prop2 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Status
                // to \Magento\PricingStorefrontApi\Api\Data\Status
                /** @var \Magento\PricingStorefrontApi\Proto\Status $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Status();
                    $r->setCode($prop2->getCode());
                    $r->setMessage($prop2->getMessage());
                    return $r;
                };
                $out = $p();
                $r->setStatus($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param PriceBookScopeRequestInterface $request
     * @return PriceBookResponseInterface
     * @throws \Throwable
     */
    public function findPriceBook(PriceBookScopeRequestInterface $request): PriceBookResponseInterface
    {
        $protoRequest = $this->findPriceBookToProto($request);
        [$protoResult, $status] = $this->protoClient->findPriceBook($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->findPriceBookFromProto($protoResult);
    }

    /**
     * Autogenerated description for findPriceBook method
     *
     * @param PriceBookScopeRequestInterface $value
     * @return PriceBookScopeRequest
     */
    private function findPriceBookToProto(PriceBookScopeRequestInterface $value): PriceBookScopeRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequest
        // to \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookScopeRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookScopeRequest();
            $prop1 = $value->getScopes();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\Scope
                // to \Magento\PricingStorefrontApi\Proto\Scope
                /** @var \Magento\PricingStorefrontApi\Api\Data\Scope $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\Scope();
                    $values = [];
                    foreach ($prop1->getWebsite() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setWebsite($values);
                    $values = [];
                    foreach ($prop1->getCustomerGroup() as $newValue) {
                        $values[] = $newValue;
                    }
                    $r->setCustomerGroup($values);
                    return $r;
                };
                $proto = $p();
                $r->setScopes($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for findPriceBook method
     *
     * @param PriceBookResponse $value
     * @return PriceBookResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function findPriceBookFromProto(PriceBookResponse $value): PriceBookResponseInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookResponse
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookResponse();
            $prop1 = $value->getPriceBook();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\PriceBook
                // to \Magento\PricingStorefrontApi\Api\Data\PriceBook
                /** @var \Magento\PricingStorefrontApi\Proto\PriceBook $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBook();
                    $r->setId($prop1->getId());
                    $r->setName($prop1->getName());
                    $r->setParentId($prop1->getParentId());
                    $prop5 = $prop1->getScope();
                    if ($prop5 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Scope
                        // to \Magento\PricingStorefrontApi\Api\Data\Scope
                        /** @var \Magento\PricingStorefrontApi\Proto\Scope $prop5 **/
                        $p = function () use ($prop5) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Scope();
                            $values = [];
                            foreach ($prop5->getWebsite() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setWebsite($values);
                            $values = [];
                            foreach ($prop5->getCustomerGroup() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setCustomerGroup($values);
                            return $r;
                        };
                        $out = $p();
                        $r->setScope($out);
                    }
                    return $r;
                };
                $out = $p();
                $r->setPriceBook($out);
            }
            $prop2 = $value->getStatus();
            if ($prop2 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Status
                // to \Magento\PricingStorefrontApi\Api\Data\Status
                /** @var \Magento\PricingStorefrontApi\Proto\Status $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Status();
                    $r->setCode($prop2->getCode());
                    $r->setMessage($prop2->getMessage());
                    return $r;
                };
                $out = $p();
                $r->setStatus($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param PriceBookRequestInterface $request
     * @return PriceBookCreateResponseInterface
     * @throws \Throwable
     */
    public function createPriceBook(PriceBookRequestInterface $request): PriceBookCreateResponseInterface
    {
        $protoRequest = $this->createPriceBookToProto($request);
        [$protoResult, $status] = $this->protoClient->createPriceBook($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->createPriceBookFromProto($protoResult);
    }

    /**
     * Autogenerated description for createPriceBook method
     *
     * @param PriceBookRequestInterface $value
     * @return PriceBookRequest
     */
    private function createPriceBookToProto(PriceBookRequestInterface $value): PriceBookRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookRequest
        // to \Magento\PricingStorefrontApi\Proto\PriceBookRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookRequest();
            $prop1 = $value->getPriceBook();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBook
                // to \Magento\PricingStorefrontApi\Proto\PriceBook
                /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBook $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\PriceBook();
                    $r->setId($prop1->getId());
                    $r->setName($prop1->getName());
                    $r->setParentId($prop1->getParentId());
                    $prop5 = $prop1->getScope();
                    if ($prop5 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Scope
                        // to \Magento\PricingStorefrontApi\Proto\Scope
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Scope $prop5 **/
                        $p = function () use ($prop5) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Scope();
                            $values = [];
                            foreach ($prop5->getWebsite() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setWebsite($values);
                            $values = [];
                            foreach ($prop5->getCustomerGroup() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setCustomerGroup($values);
                            return $r;
                        };
                        $proto = $p();
                        $r->setScope($proto);
                    }
                    return $r;
                };
                $proto = $p();
                $r->setPriceBook($proto);
            }
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for createPriceBook method
     *
     * @param PriceBookCreateResponse $value
     * @return PriceBookCreateResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function createPriceBookFromProto(PriceBookCreateResponse $value): PriceBookCreateResponseInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookCreateResponse
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookCreateResponse
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookCreateResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookCreateResponse();
            $prop1 = $value->getPriceBook();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\PriceBook
                // to \Magento\PricingStorefrontApi\Api\Data\PriceBook
                /** @var \Magento\PricingStorefrontApi\Proto\PriceBook $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBook();
                    $r->setId($prop1->getId());
                    $r->setName($prop1->getName());
                    $r->setParentId($prop1->getParentId());
                    $prop5 = $prop1->getScope();
                    if ($prop5 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Scope
                        // to \Magento\PricingStorefrontApi\Api\Data\Scope
                        /** @var \Magento\PricingStorefrontApi\Proto\Scope $prop5 **/
                        $p = function () use ($prop5) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Scope();
                            $values = [];
                            foreach ($prop5->getWebsite() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setWebsite($values);
                            $values = [];
                            foreach ($prop5->getCustomerGroup() as $newValue) {
                                $values[] = $newValue;
                            }
                            $r->setCustomerGroup($values);
                            return $r;
                        };
                        $out = $p();
                        $r->setScope($out);
                    }
                    return $r;
                };
                $out = $p();
                $r->setPriceBook($out);
            }
            $prop2 = $value->getStatus();
            if ($prop2 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Status
                // to \Magento\PricingStorefrontApi\Api\Data\Status
                /** @var \Magento\PricingStorefrontApi\Proto\Status $prop2 **/
                $p = function () use ($prop2) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Status();
                    $r->setCode($prop2->getCode());
                    $r->setMessage($prop2->getMessage());
                    return $r;
                };
                $out = $p();
                $r->setStatus($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param PriceBookDeleteRequestInterface $request
     * @return PriceBookDeleteResponseInterface
     * @throws \Throwable
     */
    public function deletePriceBook(PriceBookDeleteRequestInterface $request): PriceBookDeleteResponseInterface
    {
        $protoRequest = $this->deletePriceBookToProto($request);
        [$protoResult, $status] = $this->protoClient->deletePriceBook($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->deletePriceBookFromProto($protoResult);
    }

    /**
     * Autogenerated description for deletePriceBook method
     *
     * @param PriceBookDeleteRequestInterface $value
     * @return PriceBookDeleteRequest
     */
    private function deletePriceBookToProto(PriceBookDeleteRequestInterface $value): PriceBookDeleteRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteRequest
        // to \Magento\PricingStorefrontApi\Proto\PriceBookDeleteRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\PriceBookDeleteRequest();
            $r->setId($value->getId());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deletePriceBook method
     *
     * @param PriceBookDeleteResponse $value
     * @return PriceBookDeleteResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deletePriceBookFromProto(PriceBookDeleteResponse $value): PriceBookDeleteResponseInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookDeleteResponse
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteResponse
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookDeleteResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookDeleteResponse();
            $prop1 = $value->getStatus();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Status
                // to \Magento\PricingStorefrontApi\Api\Data\Status
                /** @var \Magento\PricingStorefrontApi\Proto\Status $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Status();
                    $r->setCode($prop1->getCode());
                    $r->setMessage($prop1->getMessage());
                    return $r;
                };
                $out = $p();
                $r->setStatus($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param AssignPricesRequestInterface $request
     * @return PriceBookAssignPricesResponseInterface
     * @throws \Throwable
     */
    public function assignPrices(AssignPricesRequestInterface $request): PriceBookAssignPricesResponseInterface
    {
        $protoRequest = $this->assignPricesToProto($request);
        [$protoResult, $status] = $this->protoClient->assignPrices($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->assignPricesFromProto($protoResult);
    }

    /**
     * Autogenerated description for assignPrices method
     *
     * @param AssignPricesRequestInterface $value
     * @return AssignPricesRequest
     */
    private function assignPricesToProto(AssignPricesRequestInterface $value): AssignPricesRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\AssignPricesRequest
        // to \Magento\PricingStorefrontApi\Proto\AssignPricesRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\AssignPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\AssignPricesRequest();
            $res = [];
            foreach ($value->getPrices() as $item1) {
                // convert data from \Magento\PricingStorefrontApi\Api\Data\ProductPrice
                // to \Magento\PricingStorefrontApi\Proto\ProductPrice
                /** @var \Magento\PricingStorefrontApi\Api\Data\ProductPrice $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\PricingStorefrontApi\Proto\ProductPrice();
                    $r->setEntityId($item1->getEntityId());
                    $prop3 = $item1->getMinimumPrice();
                    if ($prop3 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Price
                        // to \Magento\PricingStorefrontApi\Proto\Price
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Price $prop3 **/
                        $p = function () use ($prop3) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Price();
                            $r->setRegular($prop3->getRegular());
                            $r->setFinal($prop3->getFinal());
                            return $r;
                        };
                        $proto = $p();
                        $r->setMinimumPrice($proto);
                    }
                    $prop4 = $item1->getMaximumPrice();
                    if ($prop4 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Api\Data\Price
                        // to \Magento\PricingStorefrontApi\Proto\Price
                        /** @var \Magento\PricingStorefrontApi\Api\Data\Price $prop4 **/
                        $p = function () use ($prop4) {
                            $r = new \Magento\PricingStorefrontApi\Proto\Price();
                            $r->setRegular($prop4->getRegular());
                            $r->setFinal($prop4->getFinal());
                            return $r;
                        };
                        $proto = $p();
                        $r->setMaximumPrice($proto);
                    }
                    $r->setQty($item1->getQty());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setPrices($res);
            $r->setPriceBookId($value->getPriceBookId());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for assignPrices method
     *
     * @param PriceBookAssignPricesResponse $value
     * @return PriceBookAssignPricesResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function assignPricesFromProto(PriceBookAssignPricesResponse $value): PriceBookAssignPricesResponseInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookAssignPricesResponse
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookAssignPricesResponse
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookAssignPricesResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookAssignPricesResponse();
            $prop1 = $value->getStatus();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Status
                // to \Magento\PricingStorefrontApi\Api\Data\Status
                /** @var \Magento\PricingStorefrontApi\Proto\Status $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Status();
                    $r->setCode($prop1->getCode());
                    $r->setMessage($prop1->getMessage());
                    return $r;
                };
                $out = $p();
                $r->setStatus($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param UnassignPricesRequestInterface $request
     * @return PriceBookUnassignPricesResponseInterface
     * @throws \Throwable
     */
    public function unassignPrices(UnassignPricesRequestInterface $request): PriceBookUnassignPricesResponseInterface
    {
        $protoRequest = $this->unassignPricesToProto($request);
        [$protoResult, $status] = $this->protoClient->unassignPrices($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->unassignPricesFromProto($protoResult);
    }

    /**
     * Autogenerated description for unassignPrices method
     *
     * @param UnassignPricesRequestInterface $value
     * @return UnassignPricesRequest
     */
    private function unassignPricesToProto(UnassignPricesRequestInterface $value): UnassignPricesRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\UnassignPricesRequest
        // to \Magento\PricingStorefrontApi\Proto\UnassignPricesRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\UnassignPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\UnassignPricesRequest();
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            $r->setPriceBookId($value->getPriceBookId());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for unassignPrices method
     *
     * @param PriceBookUnassignPricesResponse $value
     * @return PriceBookUnassignPricesResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function unassignPricesFromProto(PriceBookUnassignPricesResponse $value): PriceBookUnassignPricesResponseInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\PriceBookUnassignPricesResponse
        // to \Magento\PricingStorefrontApi\Api\Data\PriceBookUnassignPricesResponse
        /** @var \Magento\PricingStorefrontApi\Proto\PriceBookUnassignPricesResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\PriceBookUnassignPricesResponse();
            $prop1 = $value->getStatus();
            if ($prop1 !== null) {
                // convert data from \Magento\PricingStorefrontApi\Proto\Status
                // to \Magento\PricingStorefrontApi\Api\Data\Status
                /** @var \Magento\PricingStorefrontApi\Proto\Status $prop1 **/
                $p = function () use ($prop1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\Status();
                    $r->setCode($prop1->getCode());
                    $r->setMessage($prop1->getMessage());
                    return $r;
                };
                $out = $p();
                $r->setStatus($out);
            }
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param GetPricesRequestInterface $request
     * @return GetPricesOutputInterface
     * @throws \Throwable
     */
    public function getPrices(GetPricesRequestInterface $request): GetPricesOutputInterface
    {
        $protoRequest = $this->getPricesToProto($request);
        [$protoResult, $status] = $this->protoClient->getPrices($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getPricesFromProto($protoResult);
    }

    /**
     * Autogenerated description for getPrices method
     *
     * @param GetPricesRequestInterface $value
     * @return GetPricesRequest
     */
    private function getPricesToProto(GetPricesRequestInterface $value): GetPricesRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest
        // to \Magento\PricingStorefrontApi\Proto\GetPricesRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\GetPricesRequest();
            $r->setPriceBookId($value->getPriceBookId());
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getPrices method
     *
     * @param GetPricesOutput $value
     * @return GetPricesOutputInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getPricesFromProto(GetPricesOutput $value): GetPricesOutputInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\GetPricesOutput
        // to \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput
        /** @var \Magento\PricingStorefrontApi\Proto\GetPricesOutput $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput();
            $res = [];
            foreach ($value->getPrices() as $item1) {
                // convert data from \Magento\PricingStorefrontApi\Proto\ProductPrice
                // to \Magento\PricingStorefrontApi\Api\Data\ProductPrice
                /** @var \Magento\PricingStorefrontApi\Proto\ProductPrice $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\ProductPrice();
                    $r->setEntityId($item1->getEntityId());
                    $prop3 = $item1->getMinimumPrice();
                    if ($prop3 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Price
                        // to \Magento\PricingStorefrontApi\Api\Data\Price
                        /** @var \Magento\PricingStorefrontApi\Proto\Price $prop3 **/
                        $p = function () use ($prop3) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Price();
                            $r->setRegular($prop3->getRegular());
                            $r->setFinal($prop3->getFinal());
                            return $r;
                        };
                        $out = $p();
                        $r->setMinimumPrice($out);
                    }
                    $prop4 = $item1->getMaximumPrice();
                    if ($prop4 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Price
                        // to \Magento\PricingStorefrontApi\Api\Data\Price
                        /** @var \Magento\PricingStorefrontApi\Proto\Price $prop4 **/
                        $p = function () use ($prop4) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Price();
                            $r->setRegular($prop4->getRegular());
                            $r->setFinal($prop4->getFinal());
                            return $r;
                        };
                        $out = $p();
                        $r->setMaximumPrice($out);
                    }
                    $r->setQty($item1->getQty());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPrices($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param GetPricesRequestInterface $request
     * @return GetPricesOutputInterface
     * @throws \Throwable
     */
    public function getTierPrices(GetPricesRequestInterface $request): GetPricesOutputInterface
    {
        $protoRequest = $this->getTierPricesToProto($request);
        [$protoResult, $status] = $this->protoClient->getTierPrices($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getTierPricesFromProto($protoResult);
    }

    /**
     * Autogenerated description for getTierPrices method
     *
     * @param GetPricesRequestInterface $value
     * @return GetPricesRequest
     */
    private function getTierPricesToProto(GetPricesRequestInterface $value): GetPricesRequest
    {
        // convert data from \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest
        // to \Magento\PricingStorefrontApi\Proto\GetPricesRequest
        /** @var \Magento\PricingStorefrontApi\Api\Data\GetPricesRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Proto\GetPricesRequest();
            $r->setPriceBookId($value->getPriceBookId());
            $values = [];
            foreach ($value->getIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setIds($values);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getTierPrices method
     *
     * @param GetPricesOutput $value
     * @return GetPricesOutputInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getTierPricesFromProto(GetPricesOutput $value): GetPricesOutputInterface
    {
        // convert data from \Magento\PricingStorefrontApi\Proto\GetPricesOutput
        // to \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput
        /** @var \Magento\PricingStorefrontApi\Proto\GetPricesOutput $value **/
        $p = function () use ($value) {
            $r = new \Magento\PricingStorefrontApi\Api\Data\GetPricesOutput();
            $res = [];
            foreach ($value->getPrices() as $item1) {
                // convert data from \Magento\PricingStorefrontApi\Proto\ProductPrice
                // to \Magento\PricingStorefrontApi\Api\Data\ProductPrice
                /** @var \Magento\PricingStorefrontApi\Proto\ProductPrice $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\PricingStorefrontApi\Api\Data\ProductPrice();
                    $r->setEntityId($item1->getEntityId());
                    $prop3 = $item1->getMinimumPrice();
                    if ($prop3 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Price
                        // to \Magento\PricingStorefrontApi\Api\Data\Price
                        /** @var \Magento\PricingStorefrontApi\Proto\Price $prop3 **/
                        $p = function () use ($prop3) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Price();
                            $r->setRegular($prop3->getRegular());
                            $r->setFinal($prop3->getFinal());
                            return $r;
                        };
                        $out = $p();
                        $r->setMinimumPrice($out);
                    }
                    $prop4 = $item1->getMaximumPrice();
                    if ($prop4 !== null) {
                        // convert data from \Magento\PricingStorefrontApi\Proto\Price
                        // to \Magento\PricingStorefrontApi\Api\Data\Price
                        /** @var \Magento\PricingStorefrontApi\Proto\Price $prop4 **/
                        $p = function () use ($prop4) {
                            $r = new \Magento\PricingStorefrontApi\Api\Data\Price();
                            $r->setRegular($prop4->getRegular());
                            $r->setFinal($prop4->getFinal());
                            return $r;
                        };
                        $out = $p();
                        $r->setMaximumPrice($out);
                    }
                    $r->setQty($item1->getQty());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setPrices($res);
            return $r;
        };
        $out = $p();

        return $out;
    }
}
